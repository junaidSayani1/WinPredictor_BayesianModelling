@model List<HeroDTO>

<section class="heroes-page">
    <h2 class="title">Select Your Teams</h2>

    <div class="teams-container">
        <!-- Team A -->
        <div class="team-column">
            <h3>Team A</h3>
            <div class="heroes-grid">
                @foreach (var hero in Model)
                {
                    <article class="hero-card" onclick="selectHero(this, 'A')">
                        <div class="hero-art">
                            <img src="@hero.Icon" alt="@hero.Name" />
                        </div>
                        <footer class="hero-meta">@hero.Name</footer>
                    </article>
                }
            </div>
        </div>

        <div class="predict-container">
            <button id="predBtn" class="predict-btn" onclick="predictScore()">PREDICT</button>
        </div>

        <!-- Team B -->
        <div class="team-column">
            <h3>Team B</h3>
            <div class="heroes-grid">
                @foreach (var hero in Model)
                {
                    <article class="hero-card" onclick="selectHero(this, 'B')">
                        <div class="hero-art">
                            <img src="@hero.Icon" alt="@hero.Name" />
                        </div>
                        <footer class="hero-meta">@hero.Name</footer>
                    </article>
                }
            </div>
        </div>
    </div>
</section>

<style>
    .predict-container {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 20px;
    }

    .predict-btn {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        border: none;
        background: linear-gradient(135deg, #22d3ee, #3b82f6);
        color: white;
        font-weight: 700;
        font-size: 16px;
        cursor: pointer;
        box-shadow: 0 0 15px rgba(34,211,238,0.6);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .predict-btn:hover {
            transform: scale(1.08);
            box-shadow: 0 0 25px rgba(34,211,238,0.9);
        }

    .heroes-page {
        width: 100vw;
        margin-left: calc(50% - 50vw);
        margin-right: calc(50% - 50vw);
        min-height: 100vh;
        padding: 32px 24px;
        color: #e5e7eb;
        background: radial-gradient(1200px 600px at 10% -10%, #3b82f6 0%, transparent 40%), radial-gradient(1200px 700px at 110% 20%, #22d3ee 0%, transparent 45%), linear-gradient(135deg, #0f172a 0%, #111827 60%, #0b1020 100%);
    }

    .title {
        text-align: center;
        margin-bottom: 32px;
        font-size: 40px;
    }

    /* Two sides */
    .teams-container {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 40px;
        width: 100%;
    }

    .team-column {
        flex: 0 0 520px; /* fixed width per column */
    }

        .team-column h3 {
            text-align: center;
            margin-bottom: 16px;
        }

    /* Single-column vertical list */
    .heroes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 18px;
    }

    .hero-card {
        background: rgba(255,255,255,.04);
        border: 3px solid rgba(255,255,255,.08);
        border-radius: 14px;
        overflow: hidden;
        position: relative;
        max-width: 160px;
        max-height: 160px;
        cursor: pointer;
        transition: transform .18s ease, box-shadow .18s ease, border-color .18s ease;
    }

        .hero-card:hover {
            transform: translateY(-3px);
            border-color: rgba(255,255,255,.25);
        }

        .hero-card.selected {
            border: 6px solid #22d3ee;
            box-shadow: 0 0 12px #22d3ee99;
        }

    .hero-art {
        aspect-ratio: 1/1;
        background: #0b1020;
    }

        .hero-art img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: block;
        }

    .hero-meta {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        background: rgba(0,0,0,0.6);
        padding: 6px 0;
        font-size: 14px;
        text-align: center;
        font-weight: 600;
        color: antiquewhite;
    }

</style>


<script>
    const selections = { A: [], B: [] };

    function selectHero(card, team){
      const name = card.querySelector(".hero-meta").innerText;

      if(card.classList.contains("selected")){
        card.classList.remove("selected");
        selections[team] = selections[team].filter(h => h !== name);
        return;
      }

      if(selections[team].length >= 5){
        alert("You can only select 5 heroes for Team " + team);
        return;
      }

      card.classList.add("selected");
      selections[team].push(name);

      console.log("Team " + team + ":", selections[team]);
    }

    async function predictScore(){

         const request = {
                namesA: selections['A'],
                namesB: selections['B']
            };
        const response = await fetch("/PredictController/Predict", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(request)
            });

            if (response.ok) 
            {
                const result = await response.json();
             
                fetch("/Results/Store", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(result)
                }).then(() => {
                    window.location.href = "/Results/Index";
                });
                
                // console.log(result);
            } else 
            {
                console.error("Request failed:", response.status);
            }    
        }
</script>